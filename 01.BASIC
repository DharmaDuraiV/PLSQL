			plsql

ÔÉ®	Pl/sql  is a procedural language extension for sql.
ÔÉ®	A procedural programming language is a type of programming language that follows a step-by-step, sequential approach to solve problems
ÔÉ®	It is the combination of procedural ,data manuplation language.
ÔÉ®	PL/SQL = Procedural Language (like logic, loops) + SQL (DML)
ÔÉ®	So you can control the flow of a program and also manipulate data in one place.
ÔÉ®	Oracle 6.0 introduced pl/sql :

TO VIEW VERSION OF  PL/SQL.

SELECT * 
FROM V$VERSION ;

BASICALLY PL/SQL IS A BLOCK STRUCTURED:

DECLARE [OPTIONAL]
 VARIABLE DECLARATION ,
 CURSORS,
 EXCEPTIONS 
BEGIN [ MANDATORY ]
 DML ,TCL 
 SELECT ____ INTO __ 
 CONDITIONAL ,
 CONTROL STATEMENTS ;
EXCEPTION [ OPTIONAL ]
 HANDLING EXCEPTIONS
END ; [ MANDATORY ]
/


There are two types of blocks supported by pl/sql :
	1.ANNOYMOUS BLOCK 
	2. NAMED BLOCK 

ANNOYMOUS BLOCK:

ÔÉ®	These block does not have a name and also not stored in database .
ÔÉ®	We are not supposed to call these blocks in another blocks or in client application .
EXAMPLE :
	DECLARE 
	--
 	BEGIN 
	--
	--
	END ;

 NAMED BLOCK:

üß± Named blocks are PL/SQL code blocks that have a name (like a saved program).

üóÇÔ∏è They are stored in the Oracle database, so you don‚Äôt need to write them again and again.

üîÅ You can reuse them by calling their name anywhere in your application.

üë®‚Äçüíª Used by developers to keep code organized, clean, and modular (broken into parts).

‚úÖ Very useful in big applications where the same logic is needed in many places.

üìö Types of Named Blocks:

| Type             | Description                                          |
| ---------------- | ---------------------------------------------------- |
| Procedure 	   | Performs a task (may or may not return value)        |
| Function	   | Must return a value                                  |
| Trigger          | Runs **automatically** on insert/update/delete       |
| Package          | Collection of related procedures/functions/variables |
| Package Body     | Contains the actual code for the package items       |



VARIABLE 
ÔÉ®	Variable is used to store a single value into memory location

SYNTAX: 
		VARIABLE_NAME DATATYPE(SIZE);

          EXAMPLE:

		V_NAME VARCHAR(20) ;

 Generally we are declaring variable in declare section of pl/sql blocks .
     EXAMPLES:

	DECLARE 
	     V_NAME VARCHAR(20);
	     V_AGE NUMBER(2);
	     V_SAL NUMBER(7);


HOW TO STORE THE VALUES INTO A VARIABLE.

 Using assignment operator ( :=) we used to store the values into a variables

       SYNTAX:
		VARIABLE_NAME := VALUE ;
     EXAMPLE:
		V_AGE := 60 ;
TO DISPLAY THE MESSAGES :

	DBMS_OUTPUT.PUT_LINE( 'MESSAGES');
	DBMS_OUTPUT.PUT_LINE( V_AGE);

TO DISPLAY ANY RESULT WITH IN THE PLSQL BLOCKS:

	SET SERVEROUTPUT ON ;
EXAMPLE1: 
	BEGIN
  	   DBMS_OUTPUT.PUT_LINE( 'HELLO WORLD');
	END ;
	/
O/P:
	HELLO WORLD	

EXAMPLE2: 
	DECLARE 
	 V_NAME VARCHAR(20) := 'ARCHANA' ;
	BEGIN
  	   DBMS_OUTPUT.PUT_LINE( 'WELCOME TO PLSQL WORLD :'||V_NAME);
	END ;
	/
O/P:

WELCOME TO PLSQL WORLD :ARCHANA

----------------------------------------------------------
	DECLARE 
	 V_NAME VARCHAR(20) := '&V_NAME' ;
	BEGIN
  	   DBMS_OUTPUT.PUT_LINE( 'WELCOME TO PLSQL WORLD :'||V_NAME);
	END ;
	/
