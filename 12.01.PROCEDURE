STORED PROCEDURES:-
--------------------------
🔹 A Stored Procedure is a named block of SQL and PL/SQL statements.
🔹 Once created, it is saved permanently in the database. 
🔹 It is precompiled and stored in advance, so execution is faster.
🔹 It can accept parameters: 
      🔹 IN → Used to pass input values
      🔹 OUT → Used to return output values
      🔹 IN OUT → Used for both input and output 
🔹 It can perform tasks such as INSERT, UPDATE, DELETE, and SELECT.
🔹 It may or may not return a value.
🔹 It is reusable – once written, it can be executed multiple times without rewriting the code.

Advantages of Stored Procedure

🔹 Reusable – Write the procedure once and use it in multiple programs without rewriting code
🔹 Faster Execution – Precompiled in the database, so it runs faster than normal SQL statements
🔹 Improved Security – Users access data only through the procedure, preventing unauthorized table access
🔹 Easy Maintenance – Update the logic in one place, and changes apply wherever the procedure is used
🔹 Reduced Network Traffic – Only procedure calls are sent over the network, saving bandwidth
🔹 Consistency – Ensures the same business logic is applied every time, reducing errors


--------------------------

Procedures are created to perform one or more DML operations (INSERT, UPDATE, DELETE, SELECT) on the database.
A Procedure has 2 parts:
Procedure Specification (Header) – Specifies the name of the procedure and the type of parameters.
Procedure Body – Contains the actual code to perform the required tasks.

Syntax

CREATE [OR REPLACE] PROCEDURE procedure_name
(
   param1 MODE datatype,   -- MODE = IN, OUT, IN OUT (optional)
   param2 MODE datatype
)
IS/AS
 varciable, cursor , exception..etc
BEGIN
   -- SQL / PL/SQL statements to perform tasks
EXCEPTION
   WHEN others THEN
      -- Handle errors (optional)
END [procedure_name];
/

Explaination 
🔹 CREATE PROCEDURE → Creates a new procedure in the database
🔹 [OR REPLACE] → Optional; replaces the existing procedure if it already exists
🔹 procedure_name → Name of your procedure
🔹 MODE → Replace with IN, OUT, or IN OUT
      🔹 IN → Pass input value into the procedure
      🔹 OUT → Return value from the procedure
      🔹 IN OUT → Pass value in and get output value back
🔹 IS / AS → Used to start the procedure block
🔹 You can declare local variables
🔹 You can declare cursors for fetching rows from tables
🔹 BEGIN … END → Main executable section where SQL or PL/SQL statements are written
🔹 EXCEPTION [Optional] → Handles runtime errors that may occur in the procedure
🔹 END [procedure_name] → Marks the end of the procedure

*****************************************************

EXECUTING A PROCEDURE
---------------------

Method 1: Using EXEC or EXECUTE command

syntax :
    EXEC[UTE] PROCEDURENAME(ACTUAL PARAMETERS);

****************************

🔹 Method 2: Using an Anonymous PL/SQL Block

syntax :

     BEGIN
        procedure_name(actual_parameters);
     END;
     /
***************************

🔹 Method 3: Using the CALL statement
syntax :
      CALL procedure_name(actual_parameters);

***************************************************

Dropping a Procedure
syntax :
      DROP PROCRDURE PROCEDURE_NAME;

*****************************************************

HOW TO DISPLAY THE WHOLE PROCEDURE

SELECT TEXT
FROM USER_SOURCE
WHERE NAME='PROCEDURE_NAME';

PROCEDURE_NAME → Replace with the name of the procedure you want to view
*****************************************************

EXAMPLE :
----------
🔹 Write a stored procedure named GREETING that displays the message “Welcome to TestYantra”

CREATE OR REPLACE PROCEDURE GREETING
IS
BEGIN
DBMS_OUTPUT.PUT_LINE('Welcome to TestYantra');
END ;
/

SQL> EXEC GREETING();

OUTPUT:
------------
Welcome to TestYantra

*************************************
🔹 Write a stored procedure named GREETING that accepts a parameter p_name (VARCHAR) and displays “Welcome to TestYantra <p_name>”. Execute it with your name.

CREATE OR REPLACE PROCEDURE GREETING(p_name varchar)
IS
BEGIN
DBMS_OUTPUT.PUT_LINE('Welcome to TestYantra '||p_name);
END ;
/

SQL> EXEC GREETING('Dharma');

OUTPUT:
------------
Welcome to TestYantra Dharma

Notes: whenever you pass the data types dont pass the size of the datatypes .

*************************************
🔹 WRITE A PLSQL STORE PROCEDURE FOR PASSING THE EMPNO AS PARAMETER AND
   DISPLAY NAME AND SALARY OF THE EMPLOYEES.

CREATE OR REPLACE PROCEDURE GET_EMP_DETAILS(p_empno NUMBER)
IS
    v_name VARCHAR2(20);
    v_sal  NUMBER;
BEGIN
    SELECT ename, sal
    INTO v_name, v_sal
    FROM emp
    WHERE empno = p_empno;

    DBMS_OUTPUT.PUT_LINE(v_name || ', ' || v_sal);

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20143, 'Invalid Employee Number');
END GET_EMP_DETAILS;
/


*************************************
🔹WRITE A PLSQL STORE PROCEDURE FOR PASSING THE DEPTNO AS PARAMETER AND 
  DISPLAY NAME AND SALARY AND DEPTNO  OF THE EMPLOYEES CORRESPONDING TO THE DEPTNO.

CREATE OR REPLACE PROCEDURE GET_EMP_BY_DEPT(p_deptno INT)
IS
    i EMP%ROWTYPE;
    CURSOR c1 IS
        SELECT * FROM EMP
        WHERE deptno = p_deptno;
BEGIN
    OPEN c1;
    LOOP
        FETCH c1 INTO i;
        EXIT WHEN c1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(i.ename || ', ' || i.sal || ', ' || i.deptno);
    END LOOP;
    CLOSE c1;
END GET_EMP_BY_DEPT;
/


*************************************
🔹WRITE A PLSQL STORE PROCEDURE to insert the record into the dept table 
  and the column name are deptno,dname ,loc 

CREATE OR REPLACE PROCEDURE INSERT_DEPT_RECORD(
    p_deptno IN DEPT.DEPTNO%TYPE,
    p_dname  IN DEPT.DNAME%TYPE,
    p_loc    IN DEPT.LOC%TYPE
)
IS
BEGIN
    INSERT INTO DEPT(DEPTNO, DNAME, LOC)
    VALUES(p_deptno, p_dname, p_loc);

    DBMS_OUTPUT.PUT_LINE('Record inserted successfully');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END INSERT_DEPT_RECORD;
/
