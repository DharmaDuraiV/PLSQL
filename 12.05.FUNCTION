
FUNCTION:
---------

ðŸ”¹ A FUNCTION is a named PL/SQL block used to perform a specific task.
ðŸ”¹ It is a subprogram that accepts input parameters (optional)
ðŸ”¹ In function it can returns a single value.
ðŸ”¹ Once a function is stored in the database and can be reused in SQL queries, PL/SQL blocks, or other programs.
ðŸ”¹ Functions are mainly used when you need a value to be returned after performing some operation

FUNCTION ALSO HAVIND 2 PARTS:

1)FUNCTION SPECIFICATION
2)FUNCTION BODY


--> IN FUNCTION SPECIFICATION WE ARE SPECIFYING NAME OF THE FUNCTION AND TYPE OF PARAMETERS
--> WHERE AS FUNCTION BODY WE ARE SOLVING THE ACTUAL TASK.

**************************************************************************
SYNTAX:
-----

CREATE [ OR REPLACE ] FUNCTION <FUNCTION_NAME>(PARAMETER [mode] datatype)
RETURN DATATYPE
  IS/AS
  <VARIABLES,CURSOR>
BEGIN
  STATEMENTS ;
  RETURN EXPRESSION ;
[EXCEPTION]
  EXCEPTION HANDLING 
END [FUNCTION_NAME];
/

Explanation:

ðŸ”¹ CREATE [OR REPLACE] FUNCTION â†’ Creates a new function or replaces an existing one
ðŸ”¹ <FUNCTION_NAME> â†’ Name of the function
ðŸ”¹ PARAMETER [MODE] datatype â†’ Optional input parameter(s); MODE is usually IN
ðŸ”¹ RETURN DATATYPE â†’ Specifies the type of value the function will return
ðŸ”¹ IS / AS â†’ Starts the declaration section for variables or cursors
ðŸ”¹ BEGIN ... END â†’ Main executable section of the function
ðŸ”¹ RETURN EXPRESSION â†’ Returns the computed value to the caller
ðŸ”¹ [EXCEPTION] â†’ Optional block to handle runtime errors

-----------------------------------------------------------
EXECUTING A FUNCTION
*********************

ðŸ”¹ Method 1: Using SELECT statement

 syntax :   
        SELECT FUNCTION_NAME(PARAMETERS) 
        FROM DUAL;
---------------------------------------------
ðŸ”¹ Method 2: Using Anonymous PL/SQL Block

syntax :
  DECLARE
    VARIABLE_NAME DATATYPE;  -- Variable to store function result
  BEGIN
    VARIABLE_NAME := FUNCTION_NAME(ACTUAL PARAMETERS);  -- Call the function
    DBMS_OUTPUT.PUT_LINE(VARIABLE_NAME);               -- Display the result
  END;
  /

**************************************************
HOW TO DISPLAY THE CODE OF FUNCTION

SYNTAX:

SELECT TEXT
FROM USER_SOURCE
WHERE NAME='FUNCTION_NAME';

**************************************************

HOW TO DROP THE FUNCTION 

SYNTAX:

DROP FUNCTION FUNCTION_NAME;

**************************************************
ðŸ”¹ Write a PL/SQL function named GREETING that returns a greeting message as a string.The function should return 'Welcome to TestYantra'.

create or replace function greeting
return varchar
is
begin 
 return 'Welcome to TestYantra' ;
end greeting ;
/

Execute:
*******

select greeting() from dual ;
or 
DECLARE
    g VARCHAR2(200);  -- Variable to store the function result
BEGIN
    g := greeting();                  -- Call the GREETING function
    DBMS_OUTPUT.PUT_LINE(g);          -- Display the returned message
END;
/
***************************

ðŸ”¹Write a function in PL/SQL that accepts a name as input and returns a greeting message in the format "Welcome to TestYantra : <name>".

create or replace function greeting(name varchar)
return varchar
is
begin 
 return 'Welcome to TestYantra :'||name;
end greeting ;
/

Execute :

select greeting('Ananya')
from dual ;

of

select greeting(ename)
from emp;

*****************************************************************************************************

ðŸ”¹ Write a PL/SQL function GET_SALARY that: Accepts an employee number as input Returns the salary of that employee from the EMP table

create or replace function get_salary(eid number)
return number 
as 
v_sal number(4);
begin 
 select sal into v_sal
 from emp
 where empno=eid ;
  return v_sal ;
end ;
/
*****************************************************************************************************
ðŸ”¹What will be the output of the following PL/SQL block, assuming the function sum_values is already created as shown below?

create or replace function sum_values(a int,b int)
return int 
is 
begin 
 return a+b 
end sum_values ;
/

**************************************************************************

ðŸ”¹ Write a PL/SQL function that takes a department number as input, iterates through employees using a cursor, and returns the name of an employee belonging to the given department.

create or replace function emp_name (dno int)
return varchar
is 
 v_name varchar(20);
 v_deptno number;
 v_result varchar(200) := '' ;
 cursor c1 is select ename ,deptno from emp ;
begin 
 open c1 ;
   loop
    fetch c1 into v_name,v_deptno  ;
    exit when c1%notfound ;
      if v_deptno=dno the 
        v_result := v_result || v_name ||', ' ;
      end if ;
   end loop;
 close c1 ;
 return v_result ;
end;
/

**************************************************************************
ðŸ”¹ Write a function FIRST_CHAR that takes a string as input and returns its first character.

CREATE OR REPLACE FUNCTION FIRST_CHAR(p_text IN VARCHAR2)
RETURN CHAR
IS
BEGIN
    IF p_text IS NULL OR LENGTH(p_text) = 0 THEN
        RETURN NULL;  -- Return NULL if input is empty
    ELSE
        RETURN SUBSTR(p_text, 1, 1);  -- Return the first character
    END IF;
END FIRST_CHAR;
/

ðŸ”¹ Example Usage:

SELECT FIRST_CHAR('TestYantra') AS first_char 
FROM dual;

O/P:
first_char
----------
T

SELECT FIRST_CHAR(ename) AS first_char
FROM emp;

first_char
----------
S
A
W
J
M


**************************************************************************

ASSIGNMENTS : 

ðŸ”¹ Write a function STRING_LENGTH that takes a string as input and returns the number of characters in it.
ðŸ”¹ Write a function REVERSE_STRING that takes a string and returns the reversed version of the string.
ðŸ”¹ Write a function IS_EVEN that takes a number as input and returns 'YES' if it is even and 'NO' if it is odd.
ðŸ”¹ Write a function GET_INITIALS that takes a full name as input and returns the initials (first character of each word).
ðŸ”¹ Write a function DOUBLE_SAL that takes an employee number and returns double the salary of that employee from the EMP table.
ðŸ”¹ Write a function DAY_OF_WEEK that takes a date as input and returns the name of the day (e.g., MONDAY, TUESDAY).
ðŸ”¹Write a PL/SQL function named CALCULATOR that takes two numbers (A and B) and a string operator (OP) as input. 
The function should perform the corresponding arithmetic operation based on the operator provided.

The operator (OP) can be one of the following:

'+' for addition

'-' for subtraction

'*' for multiplication

'/' for division

ðŸ”¹ Write a function GET_EMP_SALARY that takes an employee number and returns the salary of that employee. Return NULL if the employee does not exist.
ðŸ”¹ Write a function EMP_DEPT_COUNT that accepts a department number and returns the total number of employees in that department.
ðŸ”¹ Write a function GET_EMP_NAME that takes an employee number and returns the employeeâ€™s name. Return NULL if not found.
ðŸ”¹ Write a function GET_EMP_JOB that takes an employee number and returns the job title of the employee.
ðŸ”¹ Write a function CALC_BONUS that accepts employee number and bonus percentage and returns the bonus amount calculated as SAL * BONUS_PERCENTAGE / 100.

