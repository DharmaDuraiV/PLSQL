STORED PROCEDURES:-
--------------------------
ðŸ”¹ A Stored Procedure is a named block of SQL and PL/SQL statements.
ðŸ”¹ Once created, it is saved permanently in the database. 
ðŸ”¹ It is precompiled and stored in advance, so execution is faster.
ðŸ”¹ It can accept parameters: 
      ðŸ”¹ IN â†’ Used to pass input values
      ðŸ”¹ OUT â†’ Used to return output values
      ðŸ”¹ IN OUT â†’ Used for both input and output 
ðŸ”¹ It can perform tasks such as INSERT, UPDATE, DELETE, and SELECT.
ðŸ”¹ It may or may not return a value.
ðŸ”¹ It is reusable â€“ once written, it can be executed multiple times without rewriting the code.

Advantages of Stored Procedure

ðŸ”¹ Reusable â€“ Write the procedure once and use it in multiple programs without rewriting code
ðŸ”¹ Faster Execution â€“ Precompiled in the database, so it runs faster than normal SQL statements
ðŸ”¹ Improved Security â€“ Users access data only through the procedure, preventing unauthorized table access
ðŸ”¹ Easy Maintenance â€“ Update the logic in one place, and changes apply wherever the procedure is used
ðŸ”¹ Reduced Network Traffic â€“ Only procedure calls are sent over the network, saving bandwidth
ðŸ”¹ Consistency â€“ Ensures the same business logic is applied every time, reducing errors


--------------------------

Procedures are created to perform one or more DML operations (INSERT, UPDATE, DELETE, SELECT) on the database.
A Procedure has 2 parts:
Procedure Specification (Header) â€“ Specifies the name of the procedure and the type of parameters.
Procedure Body â€“ Contains the actual code to perform the required tasks.

Syntax

CREATE [OR REPLACE] PROCEDURE procedure_name
(
   param1 MODE datatype,   -- MODE = IN, OUT, IN OUT (optional)
   param2 MODE datatype
)
IS/AS
 varciable, cursor , exception..etc
BEGIN
   -- SQL / PL/SQL statements to perform tasks
EXCEPTION
   WHEN others THEN
      -- Handle errors (optional)
END [procedure_name];
/

Explaination 
ðŸ”¹ CREATE PROCEDURE â†’ Creates a new procedure in the database
ðŸ”¹ [OR REPLACE] â†’ Optional; replaces the existing procedure if it already exists
ðŸ”¹ procedure_name â†’ Name of your procedure
ðŸ”¹ MODE â†’ Replace with IN, OUT, or IN OUT
      ðŸ”¹ IN â†’ Pass input value into the procedure
      ðŸ”¹ OUT â†’ Return value from the procedure
      ðŸ”¹ IN OUT â†’ Pass value in and get output value back
ðŸ”¹ IS / AS â†’ Used to start the procedure block
ðŸ”¹ You can declare local variables
ðŸ”¹ You can declare cursors for fetching rows from tables
ðŸ”¹ BEGIN â€¦ END â†’ Main executable section where SQL or PL/SQL statements are written
ðŸ”¹ EXCEPTION [Optional] â†’ Handles runtime errors that may occur in the procedure
ðŸ”¹ END [procedure_name] â†’ Marks the end of the procedure

*****************************************************

EXECUTING A PROCEDURE
---------------------

Method 1: Using EXEC or EXECUTE command

syntax :
    EXEC[UTE] PROCEDURENAME(ACTUAL PARAMETERS);

****************************

ðŸ”¹ Method 2: Using an Anonymous PL/SQL Block

syntax :

     BEGIN
        procedure_name(actual_parameters);
     END;
     /
***************************

ðŸ”¹ Method 3: Using the CALL statement
syntax :
      CALL procedure_name(actual_parameters);

***************************************************

Dropping a Procedure
syntax :
      DROP PROCRDURE PROCEDURE_NAME;

*****************************************************

HOW TO DISPLAY THE WHOLE PROCEDURE

SELECT TEXT
FROM USER_SOURCE
WHERE NAME='PROCEDURE_NAME';

PROCEDURE_NAME â†’ Replace with the name of the procedure you want to view
*****************************************************

EXAMPLE :1
------------------

CREATE OR REPLACE PROCEDURE GREETING(NAME  VARCHAR)
IS
BEGIN
DBMS_OUTPUT.PUT_LINE('WELCOME '||NAME||' TO GOPALAN CO-WORKS');
END ;
/

SQL> EXEC GREETING('JOHN');

OUTPUT:
------------

WELCOME JOHN TO GOPALAN CO-WORKS

*************************************

2 .WRITE A PLSQL STORE PROCEDURE FOR PASSING THE EMPNO AS PARAMETER AND
   DISPLAY NAME AND SALARY OF THE EMPLOYEES.

create or replace procedure e_name( e number)
is 
 v_name varchar(20) ;
 v_sal number ;
begin
 select ename ,sal into v_name ,v_sal
 from emp
 where empno = e ;
  dbms_output.put_line(v_name ||', '||v_sal);
exception 
  when no_data_found then 
    raise_application_error(-20143,'Invalid data');
end ;
/

3.WRITE A PLSQL STORE PROCEDURE FOR PASSING THE DEPTNO AS PARAMETER AND 
  DISPLAY NAME AND SALARY AND DEPTNO  OF THE EMPLOYEES CORRESPONDING TO THE DEPTNO.

create or replace procedure emp_dept_name(dno int)
is
 i emp%rowtype ;
 cursor c1 is select * from emp where deptno = dno ;
begin 
 open c1 ;
  loop 
    fetch c1 into i ;
    exit when  c1%notfound ;
     dbms_output.put_line(i.ename||', '||i.sal||', '||i.deptno);
  end loop ;
 close c1 ;
end ;
/

4.WRITE A PLSQL STORE PROCEDURE to insert the record into the dept table 
  and the column name are deptno,dname ,loc 

create or replace procedure insert_dept(dno int,d_name varchar,loc varchar)
as
begin 
 insert into dept values(dno,d_name,loc);
 commit ;
end ;
/

THERE ARE THREEE TYPES OF EXECUTION METHOS SUPPORTED BY PARAMETERS 
   I) POSITION NOTATIONS 
  II) NAMED NOTATIONS 
 III) MIXED NOTATIONS 

     I) POSITION NOTATIONS 
*****************************

EX: SQL > EXEC DEPT_INSERT(1,'HR','BANGALORE');

     II) NAMED NOTATIONS 
****************************

      BY USING THE PARAMETR WE CAN PASS THE VALUES ALONG WITH THE (=>) SYMBOL

EX: SQL > EXEC DEPT_INSERT(P_DNAME => 'HR',P_LOC => 'BANGALORE',P_DEPTNO=>2);

    III) MIXED NOTATIONS 
******************************

 	IT IS THE COMBINATION OF POSITIONAL AND NAMED NOTATION 

     NOTES : AFTER THE POSITIONAL THEIR CAN BE ALL NAMED NOTATION BUT AFTER THE NAME CANNOT BE POSITIONAL NOTATION

 EX: SQL > EXEC DEPT_INSERT(3,P_DNAME => 'HR',P_LOC => 'BANGALORE',);

**************************************************************************************************************************


5.WRITE A PLSQL STORE PROCEDURE to update salary of all
   if the job is manager 5% hike 
   or the job is analyst 3% hike 
   else 1% .
6.WRITE A PLSQL STORE PROCEDURE to delete the emp table record based on empno .





